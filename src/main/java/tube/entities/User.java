package tube.entities;
// Generated Oct 6, 2016 4:59:27 PM by Hibernate Tools 5.2.0.Beta1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.*;

import org.springframework.cache.annotation.Cacheable;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Users generated by hbm2java
 */
@Cacheable
@Entity
@Table(name = "users", catalog = "youtubeDB", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "username") })
public class User implements java.io.Serializable {

	private Integer id;
	
	@NotNull
	@Pattern(regexp="([a-zA-Z0-9]+(?:[._+-][a-zA-Z0-9]+)*){2,}@([a-zA-Z0-9]+(?:[.-][a-zA-Z0-9]+)*[.][a-zA-Z]{2,})", message="{email.valid}")
	private String email;
	
	@NotNull
	@Size(min=8, message="{password.size}")
	@Pattern(regexp="^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}$", message="{password.pattern}")
	private String password;
	
	@NotNull
	@Size(min=2, max=20, message="{username.size}")
	@Pattern(regexp="[a-zA-Z0-9_-]+", message="{username.pattern}")
	private String username;
	
	private boolean isAdmin;
	private boolean isBanned;
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Playlist> playlists = new HashSet<Playlist>(0);
	private List<User> userSubscriptions = new ArrayList<User>(0);
	private Set<UserLikes> userLikes = new HashSet<UserLikes>(0);
	private List<Video> videos = new ArrayList<Video>();
	private Set<User> subscribers = new HashSet<User>(0);

	public User() {
	}

	public User(String email, boolean isAdmin, boolean isBanned, String password, String username) {
		this.email = email;
		this.isAdmin = isAdmin;
		this.isBanned = isBanned;
		this.password = password;
		this.username = username;
	}

	public User(String email, boolean isAdmin, boolean isBanned, String password, String username,
			Set<Comment> comments, Set<Playlist> playlists, List<User> userSubscriptions, Set<UserLikes> userLikes,
			List<Video> videos, Set<User> subscribers) {
		this.email = email;
		this.isAdmin = isAdmin;
		this.isBanned = isBanned;
		this.password = password;
		this.username = username;
		this.comments = comments;
		this.playlists = playlists;
		this.userSubscriptions = userSubscriptions;
		this.userLikes = userLikes;
		this.videos = videos;
		this.subscribers = subscribers;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "email", unique = true, nullable = false, length = 45)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "isAdmin", nullable = false)
	public boolean isIsAdmin() {
		return this.isAdmin;
	}

	public void setIsAdmin(boolean isAdmin) {
		this.isAdmin = isAdmin;
	}

	@Column(name = "isBanned", nullable = false)
	public boolean isIsBanned() {
		return this.isBanned;
	}

	public void setIsBanned(boolean isBanned) {
		this.isBanned = isBanned;
	}

	@Column(name = "password", nullable = false, length = 200)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "username", unique = true, nullable = false, length = 45)
	public String getUsername() {
		return this.username;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", email=" + email + ", isAdmin=" + isAdmin + ", isBanned=" + isBanned + ", password="
				+ password + ", username=" + username + "]";
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Comment> getCommentses() {
		return this.comments;
	}

	public void setCommentses(Set<Comment> commentses) {
		this.comments = commentses;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Playlist> getPlaylists() {
		return this.playlists;
	}

	public void setPlaylists(Set<Playlist> playlists) {
		this.playlists = playlists;
	}

	@JsonIgnore
	@ManyToMany(fetch = FetchType.EAGER)
	@Column(name = "subscribe_user_id")
	@JoinTable(name = "subscribers", catalog = "youtubeDB", joinColumns = {
					@JoinColumn(name = "subscribe_user_id", unique = true, nullable = false, updatable = false) }, inverseJoinColumns = {
							@JoinColumn(name = "user_id", unique = true, nullable = false, updatable = false) })
	public List<User> getUserSubscriptions() {
		return this.userSubscriptions;
	}

	public void setUserSubscriptions(List<User> usersForUserId) {
		this.userSubscriptions = usersForUserId;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<UserLikes> getUserLikes() {
		return this.userLikes;
	}

	public void setUserLikes(Set<UserLikes> userLikes) {
		this.userLikes = userLikes;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public List<Video> getVideos() {
		return this.videos;
	}

	public void setVideos(List<Video> videos) {
		this.videos = videos;
	}

	@JsonIgnore
	@ManyToMany(fetch = FetchType.EAGER)
	@Column(name = "user_id")
	@JoinTable(name = "subscribers", catalog = "youtubeDB", joinColumns = {
					@JoinColumn(name = "user_id", unique = true, nullable = false, updatable = false) }, inverseJoinColumns = {
							@JoinColumn(name = "subscribe_user_id", unique = true, nullable = false, updatable = false) })
	public Set<User> getSubscribers() {
		return this.subscribers;
	}

	public void setSubscribers(Set<User> usersesForSubscribeUserId) {
		this.subscribers = usersesForSubscribeUserId;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

}
